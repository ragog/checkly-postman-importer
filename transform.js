function transformTest(postmanTest, groupId) {
	const checkName = postmanTest.name;
	const request = postmanTest.request;
	const requestMethod = request.method;
	const requestUrl = request.url;
	let requestUrlRaw = requestUrl.raw;

	const urlVariables = requestUrlRaw.match(':[a-zA-Z]*');
	if (urlVariables && requestUrl.variable) {
		for (variable of requestUrl.variable) {
			requestUrlRaw = requestUrlRaw.replace(':' + variable.key, variable.value);
		}
	}

	const requestBodyMode = postmanTest.request.body ? postmanTest.request.body.mode : undefined;
	const requestBody = postmanTest.request.body ? postmanTest.request.body.raw : ''; // TODO: only handles raw
	const oldRequestHeaders = postmanTest.request.header;
	const postmanDefaultHeaders = [
		// autogenerated by Postman
		{ key: 'User-Agent', value: 'Checkly' }, // changed to Checkly
		{ key: 'Accept', value: '*/*' },
		{ key: 'Accept-Encoding', value: 'gzip, deflate, br' },
		{ key: 'Connection', value: 'keep-alive' },
	];
	const newRequestHeaders = postmanDefaultHeaders;
	const oldQueryParams = postmanTest.request.url.query;
	const newQueryParams = [];

	for (let oldHeader of oldRequestHeaders) {
		if (oldHeader.key) {
			const newHeader = {
				key: oldHeader.key,
				value: oldHeader.value,
			};
			newRequestHeaders.push(newHeader);
		}
	}

	if (oldQueryParams) {
		for (let oldQueryParam of oldQueryParams) {
			if (!oldQueryParam.disabled) {
				const newQueryParam = {
					key: oldQueryParam.key,
					value: oldQueryParam.value,
				};
				newQueryParams.push(newQueryParam);
			}
		}
	}

	const basicAuthUsername = request.auth?.basic[0]?.value;
	const basicAuthPassword = request.auth?.basic[0]?.value;

	return (finishedCheck = {
		name: checkName,
		groupId: groupId,
		checkType: 'API',
		frequency: 10,
		activated: true,
		muted: false,
		doubleCheck: true,
		sslCheck: false,
		shouldFail: false,
		locations: ['us-east-1', 'eu-central-1'],
		request: {
			method: requestMethod,
			url: requestUrlRaw,
			followRedirects: true,
			body: requestBody,
			bodyType: 'RAW',
			headers: newRequestHeaders,
			queryParameters: newQueryParams,
			assertions: [],
			basicAuth: {
				username: basicAuthUsername ? basicAuthUsername : '',
				password: basicAuthPassword ? basicAuthPassword : '',
			},
		},
		alertSettings: {
			escalationType: 'RUN_BASED',
			runBasedEscalation: {
				failedRunThreshold: 1,
			},
			timeBasedEscalation: {
				minutesFailingThreshold: 5,
			},
			reminders: {
				amount: 0,
				interval: 5,
			},
			sslCertificates: {
				enabled: true,
				alertThreshold: 30,
			},
		},
		useGlobalAlertSettings: true,
		degradedResponseTime: 10000,
		maxResponseTime: 20000,
	});
}

function transformFolder(postmanFolder) {
	return {
		name: postmanFolder.name,
		activated: true,
		muted: false,
		sslCheck: false,
		doubleCheck: true,
		locations: ['us-east-1', 'eu-central-1'],
		alertSettings: {
			escalationType: 'RUN_BASED',
			runBasedEscalation: {
				failedRunThreshold: 1,
			},
			timeBasedEscalation: {
				minutesFailingThreshold: 5,
			},
			reminders: {
				amount: 0,
				interval: 5,
			},
			sslCertificates: {
				enabled: true,
				alertThreshold: 30,
			},
		},
		alertChannelSubscriptions: [],
		useGlobalAlertSettings: true,
	};
}

module.exports = {
	transformFolder: transformFolder,
	transformTest: transformTest,
};
